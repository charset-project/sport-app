// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sport_app_backend.Data;

#nullable disable

namespace sport_app_backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250902112439_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("sport_app_backend.Models.Account.Athlete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActiveWorkoutProgramId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CurrentWeight")
                        .HasColumnType("REAL");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.Property<int>("RestTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeBeforeWorkout")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("WeightGoal")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Athletes");
                });

            modelBuilder.Entity("sport_app_backend.Models.Account.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<int?>("CoachQuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HeadLine")
                        .IsRequired()
                        .HasMaxLength(124)
                        .HasColumnType("TEXT");

                    b.Property<string>("InstagramLink")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.Property<double>("ServiceFee")
                        .HasColumnType("REAL");

                    b.Property<string>("TelegramLink")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Verified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WhatsApp")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CoachQuestionId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("sport_app_backend.Models.Account.CoachService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CoachId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CommunicateType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("HaveSupport")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfSell")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("CoachServices");
                });

            modelBuilder.Entity("sport_app_backend.Models.Account.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageProfile")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT");

                    b.Property<int>("TypeOfUser")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("sport_app_backend.Models.Account.WeightEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AthleteId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CurrentDate")
                        .HasColumnType("date");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.ToTable("WeightEntries");
                });

            modelBuilder.Entity("sport_app_backend.Models.Actions.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivityCategory")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AthleteId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CaloriesLost")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<double>("Distance")
                        .HasColumnType("REAL");

                    b.Property<double>("Duration")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("sport_app_backend.Models.Actions.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseCategory")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseMuscle")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("TEXT");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<int>("Equipment")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExerciseLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExerciseType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ForceType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageLink")
                        .IsRequired()
                        .HasMaxLength(170)
                        .HasColumnType("TEXT");

                    b.Property<int>("Mechanics")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Met")
                        .HasColumnType("REAL");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetMuscles")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoLink")
                        .IsRequired()
                        .HasMaxLength(170)
                        .HasColumnType("TEXT");

                    b.Property<int>("Views")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("sport_app_backend.Models.AthleteFaq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AthleteFaq");
                });

            modelBuilder.Entity("sport_app_backend.Models.Challenge_Achievement.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AthleteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChallengeType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("sport_app_backend.Models.CoachFaq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CoachFaq");
                });

            modelBuilder.Entity("sport_app_backend.Models.CoachQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DifficultTrackAthletes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Disciplines")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("HardCommunicationWithAthletes")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("ManagingRevenue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Motivations")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PresentsPracticeProgram")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TrackAthlete")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WorkOnlineWithAthletes")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CoachQuestions");
                });

            modelBuilder.Entity("sport_app_backend.Models.Login_Sinup.CodeVerify", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeCodeSend")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CodeVerifies");
                });

            modelBuilder.Entity("sport_app_backend.Models.Payments.CoachPayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<int>("CoachId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TransactionReference")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("CoachPayouts");
                });

            modelBuilder.Entity("sport_app_backend.Models.Payments.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<double>("AppFee")
                        .HasColumnType("REAL");

                    b.Property<int>("AthleteId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AthleteQuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Authority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("CoachId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CoachServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RefId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.HasIndex("AthleteQuestionId");

                    b.HasIndex("CoachId");

                    b.HasIndex("CoachServiceId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.ExerciseChangeRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AthleteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CoachId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Reason")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SingleExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrainingSessionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.HasIndex("CoachId");

                    b.HasIndex("SingleExerciseId");

                    b.HasIndex("TrainingSessionId");

                    b.ToTable("ExerciseChangeRequests");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.ExerciseFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AthleteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CoachId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPositive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NegativeReason")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SingleExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrainingSessionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.HasIndex("CoachId");

                    b.HasIndex("SingleExerciseId");

                    b.HasIndex("TrainingSessionId");

                    b.ToTable("ExerciseFeedbacks");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.ProgramInDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ForWhichDay")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkoutProgramId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutProgramId");

                    b.ToTable("ProgramInDays");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.SingleExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProgramInDayId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rep")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Set")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("ProgramInDayId");

                    b.ToTable("SingleExercises");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.TrainingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DayNumber")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("ExerciseCompletionBitmap")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("ExerciseFeeling")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProgramInDayId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrainingSessionStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkoutProgramId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProgramInDayId");

                    b.HasIndex("WorkoutProgramId");

                    b.ToTable("TrainingSessions");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.WorkoutProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AthleteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CoachId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompletedSessionCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DedicatedWarmUp")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("GeneralWarmUp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastExerciseDate")
                        .HasColumnType("date");

                    b.Property<int>("PaymentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProgramDuration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProgramLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProgramPriorities")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalSessionCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.HasIndex("CoachId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.ToTable("WorkoutPrograms");
                });

            modelBuilder.Entity("sport_app_backend.Models.Question.A_Question.AthleteBodyImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AthleteId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AthleteQuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BackLink")
                        .HasColumnType("TEXT");

                    b.Property<string>("FrontLink")
                        .HasColumnType("TEXT");

                    b.Property<string>("SideLink")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AthleteQuestionId")
                        .IsUnique();

                    b.ToTable("AthleteImage");
                });

            modelBuilder.Entity("sport_app_backend.Models.Question.A_Question.AthleteQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AthleteId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int>("CurrentBodyForm")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DaysPerWeekToExercise")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExerciseGoal")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FitnessLevel")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.ToTable("AthleteQuestions");
                });

            modelBuilder.Entity("sport_app_backend.Models.Question.A_Question.InjuryArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AthleteQuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HormonalAndGlandular")
                        .HasColumnType("TEXT");

                    b.Property<string>("InternalAndDigestive")
                        .HasColumnType("TEXT");

                    b.Property<bool>("None")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Others")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Skeletal")
                        .HasColumnType("TEXT");

                    b.Property<string>("SoftTissueAndLigament")
                        .HasColumnType("TEXT");

                    b.Property<string>("Specific")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AthleteQuestionId")
                        .IsUnique();

                    b.ToTable("InjuryAreas");
                });

            modelBuilder.Entity("sport_app_backend.Models.ReportApp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ReportApps");
                });

            modelBuilder.Entity("sport_app_backend.Models.WaterInDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AthleteId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("NumberOfCupsDrinked")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.ToTable("WaterInDays");
                });

            modelBuilder.Entity("sport_app_backend.Models.WaterInTake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AthleteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DailyCupOfWater")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Reminder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId")
                        .IsUnique();

                    b.ToTable("WaterInTakes");
                });

            modelBuilder.Entity("sport_app_backend.Models.Account.Athlete", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.User", "User")
                        .WithOne("Athlete")
                        .HasForeignKey("sport_app_backend.Models.Account.Athlete", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("sport_app_backend.Models.Account.Coach", b =>
                {
                    b.HasOne("sport_app_backend.Models.CoachQuestion", "CoachQuestion")
                        .WithMany()
                        .HasForeignKey("CoachQuestionId");

                    b.HasOne("sport_app_backend.Models.Account.User", "User")
                        .WithOne("Coach")
                        .HasForeignKey("sport_app_backend.Models.Account.Coach", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoachQuestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("sport_app_backend.Models.Account.CoachService", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.Coach", "Coach")
                        .WithMany("CoachingServices")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("sport_app_backend.Models.Account.WeightEntry", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.Athlete", "Athlete")
                        .WithMany("WeightEntries")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("sport_app_backend.Models.Actions.Activity", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.Athlete", "Athlete")
                        .WithMany("Activities")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("sport_app_backend.Models.Challenge_Achievement.Challenge", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.Athlete", "Athlete")
                        .WithMany()
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("sport_app_backend.Models.CoachQuestion", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("sport_app_backend.Models.Payments.CoachPayout", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.Coach", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("sport_app_backend.Models.Payments.Payment", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.Athlete", "Athlete")
                        .WithMany("Payments")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sport_app_backend.Models.Question.A_Question.AthleteQuestion", "AthleteQuestion")
                        .WithMany()
                        .HasForeignKey("AthleteQuestionId");

                    b.HasOne("sport_app_backend.Models.Account.Coach", "Coach")
                        .WithMany("Payments")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sport_app_backend.Models.Account.CoachService", "CoachService")
                        .WithMany()
                        .HasForeignKey("CoachServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");

                    b.Navigation("AthleteQuestion");

                    b.Navigation("Coach");

                    b.Navigation("CoachService");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.ExerciseChangeRequest", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.Athlete", "Athlete")
                        .WithMany()
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sport_app_backend.Models.Account.Coach", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sport_app_backend.Models.Program.SingleExercise", "SingleExercise")
                        .WithMany()
                        .HasForeignKey("SingleExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sport_app_backend.Models.Program.TrainingSession", "TrainingSession")
                        .WithMany()
                        .HasForeignKey("TrainingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");

                    b.Navigation("Coach");

                    b.Navigation("SingleExercise");

                    b.Navigation("TrainingSession");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.ExerciseFeedback", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.Athlete", "Athlete")
                        .WithMany()
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sport_app_backend.Models.Account.Coach", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sport_app_backend.Models.Program.SingleExercise", "SingleExercise")
                        .WithMany()
                        .HasForeignKey("SingleExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sport_app_backend.Models.Program.TrainingSession", "TrainingSession")
                        .WithMany()
                        .HasForeignKey("TrainingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");

                    b.Navigation("Coach");

                    b.Navigation("SingleExercise");

                    b.Navigation("TrainingSession");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.ProgramInDay", b =>
                {
                    b.HasOne("sport_app_backend.Models.Program.WorkoutProgram", "WorkoutProgram")
                        .WithMany("ProgramInDays")
                        .HasForeignKey("WorkoutProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkoutProgram");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.SingleExercise", b =>
                {
                    b.HasOne("sport_app_backend.Models.Actions.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sport_app_backend.Models.Program.ProgramInDay", "ProgramInDay")
                        .WithMany("AllExerciseInDays")
                        .HasForeignKey("ProgramInDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("ProgramInDay");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.TrainingSession", b =>
                {
                    b.HasOne("sport_app_backend.Models.Program.ProgramInDay", "ProgramInDay")
                        .WithMany()
                        .HasForeignKey("ProgramInDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sport_app_backend.Models.Program.WorkoutProgram", "WorkoutProgram")
                        .WithMany("TrainingSessions")
                        .HasForeignKey("WorkoutProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgramInDay");

                    b.Navigation("WorkoutProgram");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.WorkoutProgram", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.Athlete", "Athlete")
                        .WithMany("WorkoutPrograms")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sport_app_backend.Models.Account.Coach", "Coach")
                        .WithMany("WorkoutPrograms")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sport_app_backend.Models.Payments.Payment", "Payment")
                        .WithOne("WorkoutProgram")
                        .HasForeignKey("sport_app_backend.Models.Program.WorkoutProgram", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");

                    b.Navigation("Coach");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("sport_app_backend.Models.Question.A_Question.AthleteBodyImage", b =>
                {
                    b.HasOne("sport_app_backend.Models.Question.A_Question.AthleteQuestion", "AthleteQuestion")
                        .WithOne("AthleteBodyImage")
                        .HasForeignKey("sport_app_backend.Models.Question.A_Question.AthleteBodyImage", "AthleteQuestionId");

                    b.Navigation("AthleteQuestion");
                });

            modelBuilder.Entity("sport_app_backend.Models.Question.A_Question.AthleteQuestion", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.Athlete", "Athlete")
                        .WithMany("AthleteQuestions")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("sport_app_backend.Models.Question.A_Question.InjuryArea", b =>
                {
                    b.HasOne("sport_app_backend.Models.Question.A_Question.AthleteQuestion", "AthleteQuestion")
                        .WithOne("InjuryArea")
                        .HasForeignKey("sport_app_backend.Models.Question.A_Question.InjuryArea", "AthleteQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AthleteQuestion");
                });

            modelBuilder.Entity("sport_app_backend.Models.ReportApp", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("sport_app_backend.Models.WaterInDay", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.Athlete", "Athlete")
                        .WithMany("WaterInDays")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("sport_app_backend.Models.WaterInTake", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.Athlete", "Athlete")
                        .WithOne("WaterInTake")
                        .HasForeignKey("sport_app_backend.Models.WaterInTake", "AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("sport_app_backend.Models.Account.Athlete", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("AthleteQuestions");

                    b.Navigation("Payments");

                    b.Navigation("WaterInDays");

                    b.Navigation("WaterInTake");

                    b.Navigation("WeightEntries");

                    b.Navigation("WorkoutPrograms");
                });

            modelBuilder.Entity("sport_app_backend.Models.Account.Coach", b =>
                {
                    b.Navigation("CoachingServices");

                    b.Navigation("Payments");

                    b.Navigation("WorkoutPrograms");
                });

            modelBuilder.Entity("sport_app_backend.Models.Account.User", b =>
                {
                    b.Navigation("Athlete");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("sport_app_backend.Models.Payments.Payment", b =>
                {
                    b.Navigation("WorkoutProgram");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.ProgramInDay", b =>
                {
                    b.Navigation("AllExerciseInDays");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.WorkoutProgram", b =>
                {
                    b.Navigation("ProgramInDays");

                    b.Navigation("TrainingSessions");
                });

            modelBuilder.Entity("sport_app_backend.Models.Question.A_Question.AthleteQuestion", b =>
                {
                    b.Navigation("AthleteBodyImage");

                    b.Navigation("InjuryArea");
                });
#pragma warning restore 612, 618
        }
    }
}
