// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sport_app_backend.Data;

#nullable disable

namespace sport_app_backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250331234308_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("sport_app_backend.Models.Account.Athlete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("CurrentWeight")
                        .HasColumnType("double");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RestTime")
                        .HasColumnType("int");

                    b.Property<int>("TimeBeforeWorkout")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<double>("WeightGoal")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Athletes");
                });

            modelBuilder.Entity("sport_app_backend.Models.Account.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CoachQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Domain")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StartCoachingYear")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoachQuestionId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("sport_app_backend.Models.Account.CoachPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<string>("CommunicateType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("HaveSupport")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TypeOfCoachingPlan")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("CoachesPlan");
                });

            modelBuilder.Entity("sport_app_backend.Models.Account.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImageProfile")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<DateTime>("RefreshTokeNExpire")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<int>("TypeOfUser")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("sport_app_backend.Models.Account.WeightEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AthleteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CurrentDate")
                        .HasColumnType("date");

                    b.Property<double>("Weight")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.ToTable("WeightEntries");
                });

            modelBuilder.Entity("sport_app_backend.Models.Actions.Activitie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActivityCategory")
                        .HasColumnType("int");

                    b.Property<int>("AthleteId")
                        .HasColumnType("int");

                    b.Property<double>("CaloriesLost")
                        .HasColumnType("double");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Distance")
                        .HasColumnType("double");

                    b.Property<double>("Duration")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("sport_app_backend.Models.Actions.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionsTage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AnatomyImage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("BaseCategory")
                        .HasColumnType("int");

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ExerciseLevel")
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("sport_app_backend.Models.CoachQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("DifficultTrackAthletes")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Disciplines")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("HardCommunicationWithAthletes")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("ManagingRevenue")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Motivations")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PresentsPracticeProgram")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("TrackAthlete")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("WorkOnlineWithAthletes")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CoachQuestions");
                });

            modelBuilder.Entity("sport_app_backend.Models.Login_Sinup.CodeVerify", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<DateTime>("TimeCodeSend")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("CodeVerifies");
                });

            modelBuilder.Entity("sport_app_backend.Models.Payments.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<int>("AthleteId")
                        .HasColumnType("int");

                    b.Property<int>("AthleteQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<int>("CoachPlanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("TransitionId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.HasIndex("AthleteQuestionId");

                    b.HasIndex("CoachId");

                    b.HasIndex("CoachPlanId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.ExerciseInDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ExerciseNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsSuperSet")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("WorkoutProgramInDayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutProgramInDayId");

                    b.ToTable("ExerciseInDay");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.SingelExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseInDayId")
                        .HasColumnType("int");

                    b.Property<int>("Rep")
                        .HasColumnType("int");

                    b.Property<int>("Set")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("ExerciseInDayId")
                        .IsUnique();

                    b.ToTable("SingelExercise");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.SuperSetExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Exercise1Id")
                        .HasColumnType("int");

                    b.Property<int?>("Exercise2Id")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseId1")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseId2")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseInDayId")
                        .HasColumnType("int");

                    b.Property<int>("Rep1")
                        .HasColumnType("int");

                    b.Property<int>("Rep2")
                        .HasColumnType("int");

                    b.Property<int>("Set1")
                        .HasColumnType("int");

                    b.Property<int>("Set2")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Exercise1Id");

                    b.HasIndex("Exercise2Id");

                    b.HasIndex("ExerciseInDayId")
                        .IsUnique();

                    b.ToTable("SuperSetExercise");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.WorkoutProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AthleteId")
                        .HasColumnType("int");

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.HasIndex("CoachId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.ToTable("WorkoutPrograms");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.WorkoutProgramInDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ForWhichDay")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutProgramId");

                    b.ToTable("WorkoutProgramInDay");
                });

            modelBuilder.Entity("sport_app_backend.Models.Question.A_Question.AthleteQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AthleteId")
                        .HasColumnType("int");

                    b.Property<string>("CommonIssues")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int>("CurrentBodyForm")
                        .HasColumnType("int");

                    b.Property<int>("DaysPerWeekToExercise")
                        .HasColumnType("int");

                    b.Property<int?>("ExerciseGoal")
                        .HasColumnType("int");

                    b.Property<string>("ExerciseMotivation")
                        .HasColumnType("longtext");

                    b.Property<int?>("FitnessLevel")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.ToTable("AthleteQuestions");
                });

            modelBuilder.Entity("sport_app_backend.Models.Question.A_Question.InjuryArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AthleteQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("HormonalAndGlandular")
                        .HasColumnType("longtext");

                    b.Property<string>("InternalAndDigestive")
                        .HasColumnType("longtext");

                    b.Property<bool>("None")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Others")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Skeletal")
                        .HasColumnType("longtext");

                    b.Property<string>("SoftTissueAndLigament")
                        .HasColumnType("longtext");

                    b.Property<string>("Specific")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AthleteQuestionId")
                        .IsUnique();

                    b.ToTable("InjuryAreas");
                });

            modelBuilder.Entity("sport_app_backend.Models.ReportApp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ReportApps");
                });

            modelBuilder.Entity("sport_app_backend.Models.WaterInDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AthleteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("NumberOfCupsDrinked")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.ToTable("WaterInDays");
                });

            modelBuilder.Entity("sport_app_backend.Models.WaterInTake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AthleteId")
                        .HasColumnType("int");

                    b.Property<int>("DailyCupOfWater")
                        .HasColumnType("int");

                    b.Property<int>("Reminder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId")
                        .IsUnique();

                    b.ToTable("WaterInTakes");
                });

            modelBuilder.Entity("sport_app_backend.Models.Account.Athlete", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.User", "User")
                        .WithOne("Athlete")
                        .HasForeignKey("sport_app_backend.Models.Account.Athlete", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("sport_app_backend.Models.Account.Coach", b =>
                {
                    b.HasOne("sport_app_backend.Models.CoachQuestion", "CoachQuestion")
                        .WithMany()
                        .HasForeignKey("CoachQuestionId");

                    b.HasOne("sport_app_backend.Models.Account.User", "User")
                        .WithOne("Coach")
                        .HasForeignKey("sport_app_backend.Models.Account.Coach", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoachQuestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("sport_app_backend.Models.Account.CoachPlan", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.Coach", "Coach")
                        .WithMany("CoachingPlans")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("sport_app_backend.Models.Account.WeightEntry", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.Athlete", "Athlete")
                        .WithMany("WeightEntries")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("sport_app_backend.Models.Actions.Activitie", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.Athlete", "Athlete")
                        .WithMany()
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("sport_app_backend.Models.CoachQuestion", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("sport_app_backend.Models.Payments.Payment", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.Athlete", "Athlete")
                        .WithMany("Payments")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sport_app_backend.Models.Question.A_Question.AthleteQuestion", "AthleteQuestion")
                        .WithMany()
                        .HasForeignKey("AthleteQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sport_app_backend.Models.Account.Coach", "Coach")
                        .WithMany("Payments")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sport_app_backend.Models.Account.CoachPlan", "CoachPlan")
                        .WithMany()
                        .HasForeignKey("CoachPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");

                    b.Navigation("AthleteQuestion");

                    b.Navigation("Coach");

                    b.Navigation("CoachPlan");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.ExerciseInDay", b =>
                {
                    b.HasOne("sport_app_backend.Models.Program.WorkoutProgramInDay", "WorkoutProgramInDay")
                        .WithMany("AllExerciseInDays")
                        .HasForeignKey("WorkoutProgramInDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkoutProgramInDay");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.SingelExercise", b =>
                {
                    b.HasOne("sport_app_backend.Models.Actions.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sport_app_backend.Models.Program.ExerciseInDay", "ExerciseInDay")
                        .WithOne("SingelExercise")
                        .HasForeignKey("sport_app_backend.Models.Program.SingelExercise", "ExerciseInDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("ExerciseInDay");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.SuperSetExercise", b =>
                {
                    b.HasOne("sport_app_backend.Models.Actions.Exercise", "Exercise1")
                        .WithMany()
                        .HasForeignKey("Exercise1Id");

                    b.HasOne("sport_app_backend.Models.Actions.Exercise", "Exercise2")
                        .WithMany()
                        .HasForeignKey("Exercise2Id");

                    b.HasOne("sport_app_backend.Models.Program.ExerciseInDay", "ExerciseInDay")
                        .WithOne("SuperSetExercise")
                        .HasForeignKey("sport_app_backend.Models.Program.SuperSetExercise", "ExerciseInDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise1");

                    b.Navigation("Exercise2");

                    b.Navigation("ExerciseInDay");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.WorkoutProgram", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.Athlete", "Athlete")
                        .WithMany("WorkoutPrograms")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sport_app_backend.Models.Account.Coach", "Coach")
                        .WithMany("WorkoutPrograms")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sport_app_backend.Models.Payments.Payment", "Payment")
                        .WithOne("WorkoutProgram")
                        .HasForeignKey("sport_app_backend.Models.Program.WorkoutProgram", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");

                    b.Navigation("Coach");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.WorkoutProgramInDay", b =>
                {
                    b.HasOne("sport_app_backend.Models.Program.WorkoutProgram", "WorkoutProgram")
                        .WithMany("WorkoutProgramInDays")
                        .HasForeignKey("WorkoutProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkoutProgram");
                });

            modelBuilder.Entity("sport_app_backend.Models.Question.A_Question.AthleteQuestion", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.Athlete", "Athlete")
                        .WithMany("AthleteQuestions")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("sport_app_backend.Models.Question.A_Question.InjuryArea", b =>
                {
                    b.HasOne("sport_app_backend.Models.Question.A_Question.AthleteQuestion", "AthleteQuestion")
                        .WithOne("InjuryArea")
                        .HasForeignKey("sport_app_backend.Models.Question.A_Question.InjuryArea", "AthleteQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AthleteQuestion");
                });

            modelBuilder.Entity("sport_app_backend.Models.ReportApp", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("sport_app_backend.Models.WaterInDay", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.Athlete", "Athlete")
                        .WithMany("WaterInDays")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("sport_app_backend.Models.WaterInTake", b =>
                {
                    b.HasOne("sport_app_backend.Models.Account.Athlete", "Athlete")
                        .WithOne("WaterInTake")
                        .HasForeignKey("sport_app_backend.Models.WaterInTake", "AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("sport_app_backend.Models.Account.Athlete", b =>
                {
                    b.Navigation("AthleteQuestions");

                    b.Navigation("Payments");

                    b.Navigation("WaterInDays");

                    b.Navigation("WaterInTake");

                    b.Navigation("WeightEntries");

                    b.Navigation("WorkoutPrograms");
                });

            modelBuilder.Entity("sport_app_backend.Models.Account.Coach", b =>
                {
                    b.Navigation("CoachingPlans");

                    b.Navigation("Payments");

                    b.Navigation("WorkoutPrograms");
                });

            modelBuilder.Entity("sport_app_backend.Models.Account.User", b =>
                {
                    b.Navigation("Athlete");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("sport_app_backend.Models.Payments.Payment", b =>
                {
                    b.Navigation("WorkoutProgram");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.ExerciseInDay", b =>
                {
                    b.Navigation("SingelExercise");

                    b.Navigation("SuperSetExercise");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.WorkoutProgram", b =>
                {
                    b.Navigation("WorkoutProgramInDays");
                });

            modelBuilder.Entity("sport_app_backend.Models.Program.WorkoutProgramInDay", b =>
                {
                    b.Navigation("AllExerciseInDays");
                });

            modelBuilder.Entity("sport_app_backend.Models.Question.A_Question.AthleteQuestion", b =>
                {
                    b.Navigation("InjuryArea");
                });
#pragma warning restore 612, 618
        }
    }
}
